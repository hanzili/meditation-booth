// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Music struct {
	// name
	Name *string `json:"name,omitempty"`
	// duration
	Duration *int `json:"duration,omitempty"`
}

type Mutation struct {
}

type OnijiCreateSessionInput struct {
	Mood        string `json:"mood"`
	SessionType string `json:"session_type"`
	HasScent    bool   `json:"has_scent"`
	Language    string `json:"language"`
	IsLong      bool   `json:"is_long"`
}

type OnijiEndSessionInput struct {
	ID string `json:"id"`
}

type OnijiGetSessionInput struct {
	ID string `json:"id"`
}

type OnijiLoginByEmailInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type OnijiRefreshTokenInput struct {
	RefreshToken string `json:"refresh_token"`
}

type OnijiResetPasswordInput struct {
	Email string `json:"email"`
}

type OnijiSessionReponse struct {
	// error code
	ErrorCode *int `json:"error_code,omitempty"`
	// error message
	ErrorMessage *string `json:"error_message,omitempty"`
	// session
	Session *Session `json:"session,omitempty"`
}

type OnijiSessionsResponse struct {
	// error code
	ErrorCode *int `json:"error_code,omitempty"`
	// error message
	ErrorMessage *string `json:"error_message,omitempty"`
	// sessions
	Sessions []*Session `json:"sessions,omitempty"`
	// total_count
	TotalCount int `json:"total_count"`
}

type OnijiSignupByEmailInput struct {
	Email     string `json:"email"`
	Password  string `json:"password"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type OnijiUpdateSessionInput struct {
	ID     string `json:"id"`
	Survey string `json:"survey"`
}

type OnijiUpdateUserInput struct {
	FirstName *string   `json:"first_name,omitempty"`
	LastName  *string   `json:"last_name,omitempty"`
	Language  *Language `json:"language,omitempty"`
	Password  *string   `json:"password,omitempty"`
}

type OnijiUserReponse struct {
	// error code
	ErrorCode *int `json:"error_code,omitempty"`
	// error message
	ErrorMessage *string `json:"error_message,omitempty"`
	// user
	User *User `json:"user,omitempty"`
}

type Query struct {
}

type Session struct {
	// id
	ID string `json:"id"`
	// user id
	UserID string `json:"user_id"`
	// mood
	Mood string `json:"mood"`
	// session type
	SessionType string `json:"session_type"`
	// has scent
	HasScent bool `json:"has_scent"`
	// start time
	StartTime *string `json:"start_time,omitempty"`
	// end time
	EndTime *string `json:"end_time,omitempty"`
	// music
	Music *Music `json:"music"`
	// survey
	Survey *string `json:"survey,omitempty"`
}

type User struct {
	// id
	ID string `json:"id"`
	// Email
	Email string `json:"email"`
	// First Name
	FirstName *string `json:"first_name,omitempty"`
	// Last Name
	LastName *string `json:"last_name,omitempty"`
	// language
	Language *Language `json:"language,omitempty"`
	// token
	Token string `json:"token"`
	// refresh token
	RefreshToken string `json:"refresh_token"`
}

type Language string

const (
	// English
	LanguageEnglist Language = "ENGLIST"
	// French
	LanguageFrench Language = "FRENCH"
)

var AllLanguage = []Language{
	LanguageEnglist,
	LanguageFrench,
}

func (e Language) IsValid() bool {
	switch e {
	case LanguageEnglist, LanguageFrench:
		return true
	}
	return false
}

func (e Language) String() string {
	return string(e)
}

func (e *Language) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Language(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Language", str)
	}
	return nil
}

func (e Language) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
