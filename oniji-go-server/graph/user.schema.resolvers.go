package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/hanzili/oniji-go-server/graph/model"
	"github.com/hanzili/oniji-go-server/models"
	"github.com/hanzili/oniji-go-server/repositories"
	"github.com/hanzili/oniji-go-server/supabase"
	"github.com/supabase-community/gotrue-go/types"
)

// OnijiSignupByEmail is the resolver for the ONIJI_SignupByEmail field.
func (r *mutationResolver) OnijiSignupByEmail(ctx context.Context, input model.OnijiSignupByEmailInput) (*model.OnijiUserReponse, error) {
	res, err := supabase.GetClient().Auth.Signup(types.SignupRequest{
		Email:    input.Email,
		Password: input.Password,
	})
	if err != nil {
		return nil, err
	}

	user := &models.User{
		Email:    input.Email,
		Password: input.Password,
	}
	err = repositories.UserRepo.Create(user)
	if err != nil {
		return nil, err
	}

	gqlUser := convertToGqlUser(user)
	gqlUser.Token = res.AccessToken
	gqlUser.RefreshToken = res.RefreshToken

	return &model.OnijiUserReponse{
		User: gqlUser,
	}, nil
}

// OnijiLoginByEmail is the resolver for the ONIJI_LoginByEmail field.
func (r *mutationResolver) OnijiLoginByEmail(ctx context.Context, input model.OnijiLoginByEmailInput) (*model.OnijiUserReponse, error) {
	res, err := supabase.GetClient().Auth.SignInWithEmailPassword(input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	user, err := repositories.UserRepo.GetByEmail(input.Email)
	if err != nil {
		return nil, err
	}

	gqlUser := convertToGqlUser(user)
	gqlUser.Token = res.AccessToken
	gqlUser.RefreshToken = res.RefreshToken

	return &model.OnijiUserReponse{
		User: gqlUser,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
